Full Stack Application setup, practice through repetition.

1) create package.json with:
    npm init -y
    
2) install depencencies for backend, db, server, middleware
    npm i mongoose express cors

3)
    create server.js file

4)  install dotenv for credentials
    npm i dotenv

5) create a server folder
    inside of server folder create 4 more folders,
        server > config, controllers, models, routes.

6)
    establish front-end with:
        npm create-react-app client

7) cd into client folder
    cd client

8) install axios for making request in our client:
    npm i axios react-router-dom@5
        -- consider learning the react18 version of this.

9) within client, create a new components folder
        within components create: 
            Main.js
        Where you can import {useEffect, useState} from react and axios. 

DONE WITH MODULARIZATION -- PROCEED TO SERVER FOLDERS SETUP
-- understanding the modularization process --

1) config folder > copy over mongoose.config file > also .env (for db credentials)
        Update database for a new project within our .env file.
            File will also set up responses for successful or error connecting to db / models / validations.

    ** Before proceeding, check backend by testing your server.js with our .config.js file. 
- if nodemon is not already installed: 
    npm i -g nodemon (for global installation)
- else, run in the console:
    nodemon server.js

 ** At this moment, your db information should be secured and within a .gitignore
 ** A successful connection between server and your database has been established.

* Refer to models > user.model.js - for a default example of setting up your db
    * Once you create your first document, Mongoose will create your DB.
    
2) Setup the model files for all of your schemas / data types.
    model folder > ex: {singular-text-name}.model.js
        Allowing our controller to perform CRUD operations. 
    Controller calls the models to the routes folder to send back data per page request.

3) Import the model for the collection (aka: table in our db).
    To perform CRUD operations with our soon to be made routes.
        Exporting from models, allows us to import and use the User model in any file.
        Because of our modularization within our application.
            Which then heads to our routing.

4) After schema / models are created AND after importing those within our controllers.
    We can navigate through your routes and retrieve the necessary queries per route.

5) Finally, you can go to server.js that we created at the start and begin testing your routes.
    Begin by heading back to your terminal and running
        nodemon server.js

    == DEBUGGING ==
- Make sure the MongoDB server is running ('mongod' command).
- Make sure your post data matches the data that you are inserting into the database.
    In our example that is the (name and age).
- Make sure that the form submits a post request to '/users'.
- Assure that mongoose was installed (early steps).
- Check the order of everything related to mongoose.
    (require => connect => Schema => Model => route)
- Use console.log statements to follow the flow of your data.



FROM THERE, we can move forward and work on validations.
    - We can add these into our existing models, we could have done them at once.
        but, understanding the steps are important
        maybe validations may not be required depending on the project.

Example:
    const UserSchema = new mongoose.Schema({
    name: String,
    age: Number
    }, { timestamps: true });

    We can have this be more detailed == 

    const UserSchema = new mongoose.Schema({
    first_name: String,
    last_name: String,
    age: Number
    }, 
    email: {
    }, 
    { timestamps: true }
);

    Now, we can add our validations to understand it better.

    const UserSchema = new mongoose.Schema({
    first_name: {
        type: String,
        required: [true, "First Name is required"],
        minlength: [6, "First name must be at least 6 characters long"]
    },
    last_name: {
        type: String,
        required: [true, "Last name is required"],
        minlength: [6, "First name must be at least 6 characters long"],
        maxlength: [20, "Last name must be at most 20 characters long"]
    },
    age: {
        type: Number,
        min: [1, "You must be at least 1 or older to register"],
        max: [150, "You must be at most 118 years old to register"]
    },
    email: {
        type: String, required: [true, "Email is required"] 
    }
}, { timestamps: true });

    Notice that we are able to establish minimum and maximum values at the same time if we want to.
    How it changed from a simple User model

    const UserSchema = new mongoose.Schema({
        name: String,
        age: Number
    }, { timestamps: true });